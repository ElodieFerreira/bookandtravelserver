{
  "swagger": "2.0",
  "info": {
    "description": ".",
    "version": "1.0.0",
    "title": "Swagger Book&Travel",
    "termsOfService": "http://swagger.io/terms/"
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "reservation",
      "description": "Everything about reservation",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "User"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/reservation": {
      "post": {
        "tags": [
          "reservation"
        ],
        "summary": "Add a new reservation",
        "description": "Utilisé pour ajouter une nouvelle réservation. Par défaut, elle sera en attente avant validation du propriétaire",
        "operationId": "addRerservation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "La réservation qui va être ajouté",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/reservation/{reservationId}": {
      "get": {
        "tags": [
          "reservation"
        ],
        "summary": "Find reservation by ID",
        "description": "Returns a single reservation",
        "operationId": "getPetById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "ID of reservation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "reservation"
        ],
        "summary": "Deletes a reservation",
        "description": "",
        "operationId": "deleteReservation",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "ID of reservation to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Reservation not found"
          }
        }
      },
      "put": {
        "tags": [
          "reservation"
        ],
        "summary": "Update an existing reservation",
        "description": "",
        "operationId": "updateReservation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "ID of reservation to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "La réservation qui va être modifié",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Reservation not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/reservation/validation/{reservationId}": {
      "get": {
        "tags": [
          "reservation"
        ],
        "summary": "Validate an existing reservation",
        "description": "",
        "operationId": "validateReservation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reservationId",
            "in": "path",
            "description": "ID of reservation to validate",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Reservation not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/reservation/getByUser/{userId}/": {
      "get": {
        "tags": [
          "reservation"
        ],
        "summary": "Get all reservation of an user",
        "description": "",
        "operationId": "getAllReservationByUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reservation"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/:id": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "examples": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "string",
                "": "string"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Error retrieving user with id"
              }
            }
          }
        },
        "operationId": "get-user",
        "description": "Récupère un utilisateur par son identifiant",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "ID",
            "description": "L'ID de l'utilisateur"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object"
            },
            "description": ""
          }
        ]
      },
      "parameters": [],
      "delete": {
        "summary": "",
        "operationId": "delete-user-:id",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "404": {
            "description": "Aucun utilisateur avec ce nom",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Not found user with id "
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Error retrieving user with id"
              }
            }
          }
        },
        "description": "supprimer un utilisateur",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "authorization",
            "description": "Barer + token"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "",
        "operationId": "put-user-:id",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "example-1": {}
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "description": "Pas d'autorisation pour modifier l'utilisateur",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "404": {
            "description": "L'utilisateur n'a pas été trouvé dans la Base de donnée",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Not found user with id "
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Error retrieving user with id "
              }
            }
          }
        },
        "description": "Met à jour un utilisateur",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "authorization",
            "description": "Barer + token"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "post": {
        "summary": "",
        "operationId": "registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "": "Utilisateur crée"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "message": "Error retrieving user creation"
              }
            }
          }
        },
        "description": "Enregistre un nouvel utilisateur",
        "tags": [
          "User"
        ]
      }
    },
    "/user/login/": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Renvoie un token et l'id de l'utilisateur",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "number"
                },
                "toke": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "userId": 22,
                "token": "IAMALONGTOKEN"
              }
            }
          }
        },
        "operationId": "get-user-login",
        "description": "Enregistre un utilisateur"
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "bien": {
      "type": "object",
      "required": [
        "libelle",
        "adresse",
        "CP",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "libelle": {
          "type": "string"
        },
        "adresse": {
          "type": "string"
        },
        "CP": {
          "type": "integer",
          "format": "int64"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Reservation": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "date_debut": {
          "type": "string"
        },
        "date_fin": {
          "type": "string"
        },
        "etat_reservation": {
          "type": "string"
        },
        "adresse": {
          "type": "string"
        },
        "user_id_loueur": {
          "type": "integer",
          "format": "int64"
        },
        "user_id_locataire": {
          "type": "integer",
          "format": "int64"
        },
        "bien_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "User": {
      "title": "User",
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Nom": {
          "type": "string"
        },
        "Prenom": {
          "type": "string"
        },
        "MDP": {
          "type": "string"
        },
        "Telephone": {
          "type": "string"
        },
        "Mail": {
          "type": "string"
        },
        "": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
